package areshok;

import com.sedmelluq.discord.lavaplayer.track.AudioTrack;
import com.sedmelluq.discord.lavaplayer.track.AudioTrackInfo;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.OnlineStatus;
import net.dv8tion.jda.api.entities.*;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.command.GenericCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.message.MessageDeleteEvent;
import net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.callbacks.IReplyCallback;
import net.dv8tion.jda.api.interactions.commands.OptionMapping;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.Modal;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

public class Listener extends ListenerAdapter {

    AudioChannel activeVChannel;

    @Override
    public void onSlashCommandInteraction(@NotNull SlashCommandInteractionEvent ev) {

        Member m = ev.getMember();
        Guild g = ev.getGuild();

        if(g == null || m == null) {
            sendMessage(ev, "–ù–µ –ø–∏—à–∏ –º–µ–Ω—ñ!  –ø–∞–¥–ª–æ", "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—ñ –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö. –¢—ñ–ª—å–∫–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –±–∞—á–∏—Ç–∏ –º–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.", Color.RED);
            return;
        }

        MusicManager musicManager = PlayerManager.getINSTANCE().getMusicManager(g);

        HashMap<String, String> args = new HashMap<>();
        for(OptionMapping opt : ev.getOptions()) args.put(opt.getName(), opt.getAsString());

        String name = ev.getName().toLowerCase();

        switch (name) {
            case "join" -> {

                if(m.getVoiceState() == null || m.getVoiceState().getChannel() == null) {
                    sendMessage(ev, "–î–µ?", "–ó–∞–π–¥–∏ –≤ –∫–∞–Ω–∞–ª üôÉ", Color.RED);
                    return;
                }

                if (activeVChannel != null && !m.getVoiceState().getChannel().equals(activeVChannel) && activeVChannel.getMembers().size() > 1) {
                    sendMessage(ev, "–í–∏–±–∞—á–∞—é—Å—å", "–Ø –≥—Ä–∞—é –Ω–µ –¥–ª—è —Ç–µ–±–µ! üíî", Color.RED);
                    return;
                }

                sendMessage(ev, "–∫—É –º—è—É", "—à–æ —Ö–æ—á–µ—à? üòÉ", Color.GREEN);
                g.getAudioManager().openAudioConnection(activeVChannel = m.getVoiceState().getChannel());
                DiscordBot.jda.getPresence().setStatus(OnlineStatus.DO_NOT_DISTURB);

            }
            case "quit" -> quit(ev, g, m, musicManager);
            case "help" -> {
                Member mem = g.getMemberById(500568425798696971L);
                String var;
                if(mem == null) var = User.fromId(500568425798696971L).getAsMention();
                else var = mem.getAsMention();
                ev.replyEmbeds(new EmbedBuilder()
                                .setColor(Color.MAGENTA)
                                .setTitle("–Ü–Ω—Ñ–∞")
                                .addField("/join", "–ü—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è –¥–æ –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É", false)
                                .addField("/quit", "–ü–æ–∫–∏–Ω–µ –≤–∞—à –∫–∞–Ω–∞–ª", false)
                                .addField("/play [–ù–∞–∑–≤–∞/–õ—ñ–Ω–∫–∞]", "–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞–Ω–æ–≥–æ —Ç—Ä–µ–∫—É(—ñ–≤)", false)
                                .addField("/pause {–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å}", "–†–æ–±–∏—Ç—å –ø–∞—É–∑—É", false)
                                .addField("/queue", "–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è", false)
                                .addField("/skip", "–ü—Ä–æ–ø—É—Å–∫–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫", false)
                                .addField("/volume [–í—ñ–¥—Å–æ—Ç–æ–∫]", "–†–µ–≥—É–ª—é—î –≥—É—á–Ω—ñ—Å—Ç—å", false)
                                .addField("/jump [–°–µ–∫—É–Ω–¥]", "–ü—Ä–æ–ø—É—Å–∫–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫—É", false)
                                .addField("/shuffle", "–ü–µ—Ä–µ–º—ñ—à—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è", false)
                                .addField("/loop {—Ç—Ä–µ–∫}", "–ü–æ–≤—Ç–æ—Ä—é—î –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫ –∞–±–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è", false)
                                .addField("/stop", "–ó–∞–∫—Ä–∏—î —Ä–æ—Ç", false)
                                .addField("/info", "–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫", false)
                                .addField("/bass [–í—ñ–¥—Å–æ—Ç–æ–∫]", "–ü—ñ–¥—Å–∏–ª—é—î –±–∞—Å", false)
                                .addField("/help", "–ü–æ–∫–∞–∑—É—î —Ü–µ–π —Å–ø–∏—Å–æ–∫", false)
                                .setDescription("–Ø–∫—â–æ –≤–∞—Å —â–æ—Å—å –Ω–µ –≤–ª–∞—à—Ç–æ–≤—É—î –∞–±–æ —É –≤–∞—Å —î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é –∑–∞ –∞–¥—Ä–µ—Å–æ—é " + var).build())
                        .addActionRows(ActionRow.of(Button.success("support", "–î–æ–ø–æ–º–æ–≥–∞"))).setEphemeral(true).queue();
            }
            case "play" -> {

                if(args.containsKey("title")) play(ev, g, m, args.get("title"));
                else {
                    TextInput input = TextInput.create("title", "–ù–∞–∑–≤–∞ –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", TextInputStyle.SHORT)
                            .setMinLength(1)
                            .setRequired(true)
                            .setPlaceholder("–Ω–∞–ø—Ä. https://www.youtube.com/watch?v=dQw4w9WgXcQ")
                            .build();

                    Modal modal = Modal.create("title-ask", "–í–∫–∞–∂—ñ—Ç—å —Ç—Ä–µ–∫[–∏]:")
                            .addActionRows(ActionRow.of(input)).build();

                    ev.replyModal(modal).queue();
                }

            }
            case "stop" -> stop(ev, musicManager);
            case "pause" -> {

                if(!args.containsKey("duration")) {

                    TextInput when = TextInput.create("when", "–ö–æ–ª–∏", TextInputStyle.SHORT)
                            .setRequired(false)
                            .setPlaceholder("–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10").build();

                    TextInput unit = TextInput.create("unit", "–û–¥–∏–Ω–∏—Ü—è —á–∞—Å—É", TextInputStyle.SHORT)
                            .setPlaceholder("–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, (s,m,h,d)")
                            .setRequired(false)
                            .build();

                    boolean paused = musicManager.player.isPaused();

                    Modal modal = Modal.create("pause", (paused ? "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" : "–ü–∞—É–∑–∞") + " –ö–æ–Ω—Ç—Ä–æ–ª—å").addActionRows(ActionRow.of(when), ActionRow.of(unit)).build();
                    ev.replyModal(modal).queue();

                } else pause(ev, musicManager, args.get("duration"), args.get("timeunit"));

            }
            case "shuffle" -> shuffle(ev, musicManager);
            case "loop" -> loop(ev, musicManager, args.get("track"));
            case "volume" -> {

                if(!args.containsKey("volume")) {
                    TextInput input = TextInput.create("vol", "–ì—É—á–Ω—ñ—Å—Ç—å", TextInputStyle.SHORT)
                            .setPlaceholder("–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50")
                            .setRequired(true)
                            .setMinLength(1)
                            .setMaxLength(3)
                            .build();

                    Modal modal = Modal.create("volume", "–†–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ")
                            .addActionRows(ActionRow.of(input)).build();
                    ev.replyModal(modal).queue();
                } else volume(ev, musicManager, args.get("volume"));

            }
            case "skip" -> {
                if(args.get("amount") != null) skip(ev, musicManager, args.get("amount"));
                else {
                    TextInput input = TextInput.create("skip-num", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", TextInputStyle.SHORT)
                            .setRequired(true)
                            .setValue("1")
                            .setPlaceholder("–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1")
                            .setMinLength(1).build();
//                    Modal modal = Modal.create("skip", "Skip Control")
                    Modal modal = Modal.create("skip", "–°–∫—ñ–ø–Ω—É—Ç–∏")
                            .addActionRows(ActionRow.of(input)).build();
                    ev.replyModal(modal).queue();
                }
            }
            case "jump" -> {
                if(!args.containsKey("seconds")) {
                    TextInput input = TextInput.create("jump-num", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", TextInputStyle.SHORT)
                            .setPlaceholder("–≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
                            .setRequired(true)
                            .build();
                    Modal modal = Modal.create("jump", "–°–∫—ñ–ø")
//                    Modal modal = Modal.create("jump", "Jump Control")
                            .addActionRows(ActionRow.of(input)).build();
                    ev.replyModal(modal).queue();
                } else jump(ev, musicManager, args.get("seconds"));
            }
            case "queue" -> queue(ev, musicManager);
            case "info" -> info(ev, musicManager);
            case "bass" -> {
                if(!args.containsKey("amount")) {
                    TextInput input = TextInput.create("bass-num", "–ë–∞—Å—Å –±—É—Å—Ç", TextInputStyle.SHORT)
                            .setRequired(true)
                            .setPlaceholder("—É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0)")
                            .build();

                    Modal modal = Modal.create("bass", "–ë–∞—Å—Å")
                            .addActionRows(ActionRow.of(input)).build();
                    ev.replyModal(modal).queue();
                } else bass(ev, musicManager, args.get("amount"));
            }
            default -> sendMessage(ev, "–û–π!", "–Ø –Ω–µ –∑–Ω–∞—é —Ü—é –∫–æ–º–∞–Ω–¥—É, —Ö–æ—á–∞ –ø–æ–≤–∏–Ω–µ–Ω ‚ùì", Color.RED);
        }

    }

    @Override
    public void onModalInteraction(@NotNull ModalInteractionEvent ev) {

        Member m = ev.getMember();
        Guild g;
        if((g = ev.getGuild()) == null) {
            sendMessage(ev, "–ü –æ –º –∏ –ª –∫ –∞", "–ù–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", Color.RED);
            return;
        }

        MusicManager musicManager = PlayerManager.getINSTANCE().getMusicManager(g);

        switch(ev.getModalId()) {
            case "support" -> {
                String msg = ev.getValue("sup-msg").getAsString();
                User user = DiscordBot.jda.getUserById(500568425798696971L);
                assert user != null;
                PrivateChannel channel = user.openPrivateChannel().complete();
                channel.sendMessageEmbeds(new EmbedBuilder()
                        .setColor(Color.MAGENTA)
                        .setTitle("–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ " + ev.getGuild().getName())
                        .setDescription(ev.getUser().getAsTag() + " –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–ø–æ–º–æ–≥—É!")
                        .addField("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç:", msg, false).build()).queue();
                sendMessage(ev, "–ì—Ä–∞—Ü!", "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–∞ –Ω–∞—Ä–∞–∑—ñ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è", Color.GREEN);
            }
            case "title-ask" -> play(ev, g, m, ev.getValue("title").getAsString());
            case "pause" -> pause(ev, musicManager, ev.getValue("when") == null ? null : ev.getValue("when").getAsString(),
                    ev.getValue("unit") == null ? null : ev.getValue("unit").getAsString());
            case "volume" -> volume(ev, musicManager, ev.getValue("vol").getAsString());
            case "skip" -> skip(ev, musicManager, ev.getValue("skip-num").getAsString());
            case "jump" -> jump(ev, musicManager, ev.getValue("jump-num").getAsString());
            case "bass" -> bass(ev, musicManager, ev.getValue("bass-num").getAsString());
        }

    }

    @Override
    public void onMessageReactionAdd(@NotNull MessageReactionAddEvent ev) {

        if(Card.getMsg() == null) return;
        if(ev.getMessageIdLong() != Card.getMsg().getIdLong()) return;
        if(ev.getGuild().getSelfMember().equals(ev.getMember())) return;

        Guild g = ev.getGuild();
        Member m = ev.getMember();
        User u = ev.getUser();

        if(u == null) return;

        MusicManager musicManager = PlayerManager.getINSTANCE().getMusicManager(g);

        if(!Card.isPaused()) {
            if (ev.getEmoji().equals(Card.pause)) pause(null, musicManager, null, null);
            else if(ev.getEmoji().equals(Card.loop)) loop(null, musicManager, null);
            else if(ev.getEmoji().equals(Card.loop1)) loop(null, musicManager, Boolean.toString(!musicManager.handler.isLooped().getValue()));
            else if(ev.getEmoji().equals(Card.jump)) jump(null, musicManager, "10");
            else if(ev.getEmoji().equals(Card.shuffle)) shuffle(null, musicManager);
            else if(ev.getEmoji().equals(Card.skip)) skip(null, musicManager, "1");
            else if(ev.getEmoji().equals(Card.bass1)) bass(null, musicManager, Integer.toString(musicManager.bassboost - 10));
            else if(ev.getEmoji().equals(Card.bass2)) bass(null, musicManager, Integer.toString(musicManager.bassboost + 10));
            else if(ev.getEmoji().equals(Card.volume1)) volume(null, musicManager, Integer.toString(musicManager.player.getVolume() - 10));
            else if(ev.getEmoji().equals(Card.volume2)) volume(null, musicManager, Integer.toString(musicManager.player.getVolume() + 10));
        }
        if(ev.getEmoji().equals(Card.quit)) quit(null, g, m, musicManager);
        else if(ev.getEmoji().equals(Card.stop)) stop(null, musicManager);
        else if(ev.getEmoji().equals(Card.resume)) pause(null, musicManager, null, null);
        else if(ev.getEmoji().equals(Card.queue)) queue(null, musicManager);

        if(Card.getMsg() != null) Card.getMsg().removeReaction(ev.getEmoji(), u).queue();

    }

    @Override
    public void onMessageDelete(@NotNull MessageDeleteEvent ev) {

        if(Card.getMsg() == null) return;
        if(ev.getMessageIdLong() != Card.getMsg().getIdLong()) return;
        Card.reset();

    }

    @Override
    public void onButtonInteraction(@NotNull ButtonInteractionEvent ev) {

        String id;
        if((id = ev.getButton().getId()) == null) return;
        if ("support".equals(id)) {
            TextInput input = TextInput.create("sup-msg", "Message", TextInputStyle.PARAGRAPH)
                    .setPlaceholder("—è–∫—ñ—Å—å —Ç—Ä–∞–±–ª–∏?")
                    .setRequired(true)
                    .setMinLength(10).build();
            Modal modal = Modal.create("support", "Support")
                    .addActionRows(ActionRow.of(input)).build();
            ev.replyModal(modal).queue();
        }

    }

    private void sendMessage(IReplyCallback ev, String title, String description, Color color) {

        if(ev == null) return;
        ev.replyEmbeds(new EmbedBuilder()
                .setTitle(title)
                .setColor(color)
                .setDescription(description).build()).setEphemeral(true).queue();

    }

    private void quit(GenericCommandInteractionEvent ev, Guild g, Member m, MusicManager musicManager) {
        if (activeVChannel == null) {
            sendMessage(ev, "–•–∞ —Ö–∞ —Ö–∞", "–ú–µ–Ω–µ –Ω—ñ–¥–µ –Ω–µ–º–∞! üëä", Color.RED);
            return;
        }
        sendMessage(ev, "–±–±", "–Ω—é—Ö–∞–π –±–µ–±—Ä—É! üëã", Color.MAGENTA);
        activeVChannel = null;
        musicManager.handler.stop();
        g.getAudioManager().closeAudioConnection();
        DiscordBot.jda.getPresence().setPresence(OnlineStatus.ONLINE, Activity.listening("/help"));

    }

    private void play(IReplyCallback ev, Guild g, Member m, String arg) {

        if(activeVChannel == null) {
            if(m.getVoiceState() == null || m.getVoiceState().getChannel() == null) {
                sendMessage(ev, "–î–µ?", "–ó–∞–π–¥–∏ –≤ –∫–∞–Ω–∞–ª –ø–∞–¥–ª—é–∫–∞ üôÉ", Color.RED);
                return;
            } else g.getAudioManager().openAudioConnection(activeVChannel = m.getVoiceState().getChannel());
        }

        PlayerManager.getINSTANCE().load((TextChannel) ev.getMessageChannel(), ev, arg);
    }

    private void stop(IReplyCallback ev, MusicManager musicManager) {

        musicManager.handler.stop();
        sendMessage(ev, "–ú–æ–≤—á—É", "–Ω–∞—à–æ —Ç–∏ —Ü–µ –∑—Ä–æ–±–∏–≤?", Color.GREEN);
        DiscordBot.jda.getPresence().setPresence(OnlineStatus.DO_NOT_DISTURB, Activity.listening("/help"));

    }

    private void pause(IReplyCallback ev, MusicManager musicManager, String dur, String timeu) {

        int duration;

        if(dur != null) {
            try {
                duration = Integer.parseInt(dur);
                if (duration <= 0) sendMessage(ev, "–ù–µ–¥—ñ–π—Å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å!", "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏—â–µ –Ω—É–ª—è!", Color.red);
            } catch (NumberFormatException ex) {
                sendMessage(ev, "–ù–µ–¥—ñ–π—Å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å!", "`" + dur + "` –Ω–µ —î –¥—ñ–π—Å–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º!", Color.RED);
                return;
            }

            TimeUnit time;
            String timeunit;
            if ((timeunit = timeu) != null) {
                if (timeunit.toLowerCase().matches("^se?[ckx]?s?")) time = TimeUnit.SECONDS;
                else if (timeunit.toLowerCase().matches("^m(ins?)?")) time = TimeUnit.MINUTES;
                else if (timeunit.toLowerCase().matches("^(h(ours?)?)|st")) time = TimeUnit.HOURS;
                else if (timeunit.toLowerCase().matches("^(d(ays?)?)|t")) time = TimeUnit.DAYS;
                else {
                    sendMessage(ev, "–ß–∏—Å–ª–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è", "–í–∏–±–µ—Ä—ñ—Ç—å —Å–µ–∫—É–Ω–¥–∏, —Ö–≤–∏–ª–∏–Ω–∏, –≥–æ–¥–∏–Ω–∏ —Ç–∞ –¥–Ω—ñ! ‚ùå", Color.RED);
                    return;
                }
            } else time = TimeUnit.SECONDS;

            boolean paused = musicManager.handler.pause(duration, time);
            if (paused) {
                sendMessage(ev, "–ü–∞—É–∑–∞", String.join(" ", "–ë–æ—Ç –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è —á–µ—Ä–µ–∑ ", String.valueOf(duration), time.name(), " ‚è∞"), Color.GREEN);
            } else {
                sendMessage(ev, "–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è", String.join(" ", "–ë–æ—Ç –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å –≥—Ä—É —á–µ—Ä–µ–∑ ", String.valueOf(duration), time.name(), " ‚è∞"), Color.GREEN);
            }
        } else {
            boolean paused = musicManager.handler.pause();
            if (paused) {
                sendMessage(ev, "–ü–∞—É–∑–∞","–ë–æ—Ç –∑–∞—Å—Ç–æ–ø–∏–≤—Å—è", Color.GREEN);
            } else {
                sendMessage(ev, "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è", "–ë–æ—Ç –ø—Ä–æ–¥–æ–≤–∂—É—î", Color.GREEN);
            }
        }
    }

    private void shuffle(IReplyCallback ev, MusicManager musicManager) {

        musicManager.handler.shuffle();
        sendMessage(ev, "–ü–µ—Ä–µ—Ç–∞—Å—É–≤–∞–Ω–Ω—è", "–°–ø–∏—Å–æ–∫ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º—ñ—à–∞–Ω–æ", Color.GREEN);

    }

    private void loop(IReplyCallback ev, MusicManager musicManager, String track) {

        Map.Entry<Boolean, Boolean> looped = musicManager.handler.isLooped();
        if (track == null) {
            musicManager.handler.setLooped(!looped.getKey(), looped.getValue());
        } else {
            musicManager.handler.setLooped(true, Boolean.parseBoolean(track.toLowerCase()));
        }
        looped = musicManager.handler.isLooped();
        if (looped.getKey()) {
            if (looped.getValue()) {
                sendMessage(ev, "–ó–∞—Ü–∏–∫–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫—É",
                        "–Ø –∑–±–∏—Ä–∞—é—Å—è –∑–∞—Ü–∏–∫–ª–∏—Ç–∏ `" + musicManager.player.getPlayingTrack().getInfo().title + "`!", Color.GREEN);
            } else {
                sendMessage(ev, "–ó–∞—Ü–∏–∫–ª–µ–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç", "–Ø –∑–±–∏—Ä–∞—é—Å—è –∑–∞—Ü–∏–∫–ª–∏—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è", Color.GREEN);
            }
        } else {
            sendMessage(ev, "–ù–µ –∑–∞—Ü–∏–∫–ª—é—î—Ç—å—Å—è", "–Ø –Ω–µ –±—É–¥—É –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —Ç—Ä–µ–∫–∏, —è–∫—ñ –≤–∂–µ –≥—Ä–∞–ª–∏", Color.GREEN);
        }

    }

    private void volume(IReplyCallback ev, MusicManager musicManager, String volume) {

        try {

            int percent = musicManager.player.getVolume();
            int set = Integer.parseInt(volume);
            if (set <= 0) {
                sendMessage(ev, "–®–æ –∑–∞ –ø–∞–¥–ª–æ –∑–∞–∫—Ä–∏–ª–æ –º–µ–Ω—ñ —Ä–æ—Ç", "–Ø–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ —Å–ª—É—Ö–∞—Ç–∏ –ø–µ–≤–Ω—É —á–∞—Å—Ç–∏–Ω—É —Ç—Ä–µ–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/jump [—Å–µ–∫—É–Ω–¥–∏]`", Color.RED);
                return;
            } else if (set > 1000) {
                sendMessage(ev, "–¶–µ –Ω–∞–¥—Ç–æ –≥–æ–ª–æ—Å–Ω–æ", "–Ø–∫—â–æ –≤–∏ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é 1000%, —â–æ —î –º–∞–∫—Å–∏–º—É–º–æ–º", Color.RED);
                return;
            }
            musicManager.handler.volume(set);
            sendMessage(ev, "–ì—É—á–Ω—ñ—Å—Ç—å",
                    String.join("", "–ì—É—á–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∞ –≤—ñ–¥ `", String.valueOf(percent), "%` –¥–æ `", volume, "%`"), Color.GREEN);

        } catch(NumberFormatException ex) {

            sendMessage(ev, "–ù–µ–≤—ñ—Ä–Ω–µ —á–∏—Å–ª–æ", volume + " –Ω–µ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º!", Color.RED);

        }
    }

    private void skip(IReplyCallback ev, MusicManager musicManager, String amount) {

        try {

            int skip = Integer.parseInt(amount);
            if (musicManager.handler.skip(skip)) {
                sendMessage(ev, String.join(" ", "–ü—Ä–æ–ø—É—â–µ–Ω–æ", String.valueOf(skip), skip <= 1 ? "—Ç—Ä–µ–∫" : "—Ç—Ä–µ–∫—ñ–≤"), null, Color.GREEN);
            } else {
                if (skip >= 1) sendMessage(ev, "–ß–∏—Å–ª–æ –Ω–µ –ø—Ä–∏–π–º–∞—î—Ç—å—Å—è", "–°–ø–∏—Å–æ–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ —Ç–∞–∫–∏–π –≤–µ–ª–∏–∫–∏–π", Color.RED);
                else sendMessage(ev, "–ß–∏—Å–ª–æ –Ω–µ –ø—Ä–∏–π–º–∞—î—Ç—å—Å—è", "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥, –≤–∏–±–∞—á—Ç–µ(–Ω—é—Ö–∞–π –±–µ–±—Ä—É)", Color.RED);
            }

        } catch(NumberFormatException ex) {

            sendMessage(ev, "–ù–µ–≤—ñ—Ä–Ω–µ —á–∏—Å–ª–æ", amount + " –Ω–µ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º!", Color.RED);

        }

    }

    private void jump(IReplyCallback ev, MusicManager musicManager, String seconds) {

        try {
            int secs = Integer.parseInt(seconds);
            String msg = secs < 0 ? "–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ —Ü–µ–π —Ç—Ä–µ–∫ –∑–Ω–æ–≤—É, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/loop true`" : "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–µ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/skip`.";
            if (musicManager.handler.jump(secs)) {
                sendMessage(ev, "–ü–µ—Ä–µ–ª–∏—Å—Ç—É—é...", "–ü—Ä–æ–ø—É—â–µ–Ω–æ `" + secs + "s`", Color.GREEN);
            } else {
                sendMessage(ev, "–ü—ñ—Å–Ω—è –Ω–µ —Ç–∞–∫–∞ –≤–∂–µ –π –¥–æ–≤–≥–∞", msg, Color.RED);
            }
        } catch(NumberFormatException ex) {
            sendMessage(ev, "–ù–µ–≤—ñ—Ä–Ω–µ —á–∏—Å–ª–æ", seconds + " –Ω–µ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º!", Color.RED);
        }
    }

    private void queue(IReplyCallback ev, MusicManager musicManager) {

        List<AudioTrack> list = musicManager.handler.getQueue();
        EmbedBuilder embed = new EmbedBuilder().setTitle("–ß–µ—Ä–≥–∞").setColor(Color.CYAN);
        embed.setDescription("–ó–∞—Ä–∞–∑ –≥—Ä–∞—î: **" + list.get(0).getInfo().title + "** –≤—ñ–¥ –∞–≤—Ç–æ—Ä–∞ **" + list.get(0).getInfo().author + "**");
        for (int i = 1; i <= Math.min(20, list.size() - 1); i++) {

            embed.appendDescription("\n" + i + ".  " + (i >= 10 ? "" : " ") + "`" + list.get(i).getInfo().title + "` by `" + list.get(i).getInfo().author + "`");

        }
        if (list.size() > 21) {
            embed.appendDescription("\n*+ " + (list.size() - 21) + " –±—ñ–ª—å—à–µ...*");
        }

        if(ev == null) Card.getChannel().sendMessageEmbeds(embed.build()).queue(msg -> msg.delete().queueAfter(15L, TimeUnit.SECONDS));
        else ev.replyEmbeds(embed.build()).setEphemeral(true).queue();

    }

    private void info(IReplyCallback ev, MusicManager musicManager) {
        AudioTrack track = musicManager.player.getPlayingTrack();
        AudioTrackInfo info = track.getInfo();

        long temp_duration = track.getDuration();
        int hours = (int) (temp_duration / 3600000);
        temp_duration -= hours * 3600000L;
        int mins = (int) (temp_duration / 60000);
        temp_duration -= mins * 60000L;
        int secs = (int) (temp_duration / 1000);

        temp_duration = track.getPosition();
        int poshours = (int) (temp_duration / 3600000);
        temp_duration -= poshours * 3600000L;
        int posmins = (int) (temp_duration / 60000);
        temp_duration -= posmins * 60000L;
        int possecs = (int) (temp_duration / 1000);

        String id = info.uri.replace("https://www.youtube.com/watch?v=","");
        boolean isYt = !id.equals(info.uri);

        ev.replyEmbeds(new EmbedBuilder().setTitle("–ó–∞—Ä–∞–∑ –≥—Ä–∞—î:")
                .setDescription("–ù–∞–∑–≤–∞: `" + info.title + "`\n")
                .appendDescription("–ê–≤—Ç–æ—Ä: `" + info.author + "`\n")
                .appendDescription("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: `" + ((hours > 0) ? (hours + "h ") : "") + (mins >= 10 ? "" : "0") + mins + "min " + (secs >= 10 ? "" : "0") + secs + "s`\n")
                .appendDescription("–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: `" + ((poshours > 0) ? (poshours + " : ") : "") + (posmins >= 10 ? "" : "0") + posmins + " : " + (possecs >= 10 ? "" : "0") + possecs + "`")
                .setThumbnail(isYt ? "https://img.youtube.com/vi/" + id + "/hqdefault.jpg" : null).build()).setEphemeral(true).queue();
    }

    private void bass(IReplyCallback ev, MusicManager musicManager, String amount) {

        try {

            int percentage = Integer.parseInt(amount);
            if (Math.abs(percentage - 250) > 250) {
                sendMessage(ev, "–ù–µ–≤—ñ—Ä–Ω–µ —á–∏—Å–ª–æ", "–ü—Ä–∏–π–º–∞—é—Ç—å—Å—è –ª–∏—à–µ —á–∏—Å–ª–∞ –≤—ñ–¥ 0 –¥–æ 500!", Color.RED);
                return;
            }
            int from = musicManager.bassboost(percentage);
            sendMessage(ev, "–ë–∞—Å—Å –±—É—Å—Ç", "–ë–∞—Å –∑–º—ñ–Ω–µ–Ω–∏–π –∑ " + from + " –¥–æ " + percentage, Color.GREEN);

        }catch(NumberFormatException ex) {
            sendMessage(ev, "–ß–∏—Å–ª–æ", amount + " –Ω–µ —î —Ñ–∞–π–Ω–∏–º!", Color.RED);
        }
    }

}
